#
# This file defines the 'default' configuration profile of your application.
#
# You may create and use other profiles by specifying the name in your
# Fathom application launch arguments:
#
#    --profile default
#    --profile master
#
# Within a config profile, settings can be prefixed by "mode" which allows you to
# control configuration based on the PROD, TEST, & DEV runtime modes.
#
# If unspecified, your application will run in the PROD mode.
#
# If a mode-specific variant of a setting is available it will be used
# instead of a non-mode variant.
#
# For example:
#
# dev.mySetting = red
# mysetting = yellow
#
# "mySetting" will be red in DEV mode and yellow for all other modes.
#

application {
  name = ${project.name}
  version = ${project.version}

  # You may optionally relocate your conf and controller packages using a custom prefix
  # e.g. application.package="com.gitblit"
  package = "com.gitblit.reactor"

  # The prefix to use for internal cookies generated by Fathom.
  cookie.prefix = "FATHOM"

  # ISO Language Code, optionally followed by a valid ISO Country Code.
  # e.g. application.languages=[en,de,es,fr,ru]
  languages = [en]

  # The advertised hostname of your application.
  # This may be used to generate URLs for use in emails, html display, etc.
  hostname = ${undertow.host}
}

# Undertow server settings
undertow {
  # Setting a port to 0 disables that transport
  httpPort = 8080
  httpsPort = 0
  ajpPort = 0

  # Define the network interface for serving
  # e.g. 0.0.0.0 will serve on all available network interfaces
  host = "0.0.0.0"

  # The context path of your application.
  # This is useful if you are running your application behind a reverse proxy
  # and you have to create proxy/rewrite rules.
  contextPath = "/"

  # Optionally setup https/SSL
  keystoreFile = ""
  keystorePassword = ""
  truststoreFile = ""
  truststorePassword = ""
}

# Specify the fathom-security realms config file
security.configurationFile = "classpath:conf/realms.conf"
test.security.configurationFile = "classpath:conf/realms-test.conf"

# Swagger configuration
swagger {

  # The host (name or ip) serving the API.  This MUST be the host only and does
  # not include the scheme nor subpath.  It MAY include a port. If the host is
  # not specified, the host serving the documentation is to be used
  # (including the port).
  host = ""

  # The base path on which the API is served, which is relative to the host.
  # All specified routes will be relative to this path.
  basePath = "/api"

  # The transfer protocol of the API.
  schemes = ["http", "https"]

  # Swagger API Specification
  info {
    # Title of your API
    title = "${project.name} API"

    # Markdown API description resource to load and insert into the generated specification
    description = "classpath:swagger/info.md"

  }

  # Swagger UI and Specification Serving
  ui {
    # Path for serving Swagger UI and Swagger specifications
    # This path is relative to your application, not swagger.basePath
    #  - Swagger UI served on /{swagger.ui.path}
    #  - JSON specification served on /{swagger.ui.path}/swagger.json
    #  - YAML specification served on /{swagger.ui.path}/swagger.yaml
    path = "/api"

    # Text to display in the banner of the Swagger UI
    bannerText = "swagger"

    # Define the name of the token to send from Swagger UI.
    # The default value is "api_key"
    apiKeyName = api_key

    # Define the type of the API key to send from Swagger UI.
    # The default type is "header", the alternatives are "query" and "none".
    apiKeyType = header

    # Display the API key text field in Swagger UI.
    # Showing the text field allows the api key to be manually specified.
    hideApiKey = false

  }

}

# JMX Server settings
jmx {
  # The port for serving the JMX registry and handling data connections.
  port = 0
}
# Enable JMX serving for PROD mode.
# The JMX server only binds to the loopback adapter and is therefore only
# accessible via localhost.
prod.jmx.port = 7091

# Metrics settings
metrics {
  # Collect JVM metrics
  jvm.enabled = false

  # Report metrics via MBeans for JConsole, VisualVM, or JMX
  mbeans.enabled = true
}

# Logback configuration file
# see http://logback.qos.ch/documentation.html
logback.configurationFile = "classpath:conf/logback-dev.xml"

# Production mode settings
prod {
  logback.configurationFile = "classpath:conf/logback.xml"
}

# Set the preferred JCache provider.
# If unspecified, the first provider discovered will be used.
# You may specify a full provider classname or you may specify
# a nickname for an already registered JCache implementation
# such as: ehcache, infinispan, hazelcast
jcache.preferredProvider = ""

# Ehcache configuration file
# see http://ehcache.org/documentation
# specify 'jcache' to default to the Jcache default configuration
# mode.ehcache.configurationFile = "classpath:conf/ehcache.xml"
ehcache.configurationFile = "jcache"

# Infinispan configuration file
# see http://infinispan.org/docs/7.0.x/user_guide/user_guide.html
# specify 'jcache' to default to the Jcache default configuration
# mode.infinispan.configurationFile = "classpath:conf/infinispan.xml"
infinispan.configurationFile = "jcache"

# Hazelcast configuration file
# see http://hazelcast.org/documentation
# specify 'jcache' to default to the Jcache default configuration
# mode.hazelcast.configurationFile = "classpath:conf/hazelcast.xml"
hazelcast.configurationFile = "jcache"

